This is pickup (in go), a Music Player Daemon web frontend by Andy O'Neill
<andy@potatoriot.com>

Pickup is my white whale... I've been playing with the idea since 2007. I have a
large music collection, and my navigation of choice is by album, with easy
search available. The "albums" interface in Google Play Music (web) is pretty
close, but the google play uploader sucks and misses half of my songs.

I've written a functional prototype of this in C++, Python, C++ again (I was
trying to run it on an NSLU2 embedded Linux machine with 32MB RAM) and now Go.
It started off as a standalone player, then grew an xmms2 backend, and now is
going to use mpd for playback, since I already use mpd everywhere and it just
works. I'm writing it now in Go because I want to learn Go and I want to have
this system.

Design Requirements:

- Run on embedded hardware. NSLU2 would be nice, Raspberry Pi (256MB) would be
  fine.
- Display results quickly even when the music is stored on a slow-ish network
  drive (i.e. some caching of available music).
- Include more metadata than pure MPD, e.g. related artists, reviews etc. Can be
  loaded on the fly or stored locally.
- Show random albums to play. Shuffle-by-album.
- Assume /some/netsted/path/Artist/Album/Track.extension file format
- Must have: play now / add to main playlist
- Must have: play internet streams (e.g. DI Radio)
- Must have: responsive frontend, single-page-app feel.

Design Philosophy:

The Go implementation is going to be a very simple backend serving JSON to a
javascript frontend, probably in Backbone.js.


URLS to implement:
	/                      : GET: serve js and css

	/artists/              : GET: list all artists
	/artists/[search term] : GET: show matching artists
	/artists/Artist_Name/  : GET: show albums of given artist
                            POST: add or play given artist

	/albums/               : GET: list all albums
    /albums/[search term]  : GET: list matching albums
    /albums/Artist_Name/Album_Name/ : GET: show given album
                                     POST: add or play given album

	/tracks/               : GET: list all tracks?
    /tracks/[search term]  : GET: list matching tracks
	/tracks/Artist_Name/Album_Name/Track_Name: GET: show track info
                                              POST: add or play track

	/search/[search term]  : return 3 lists of matching artists, albums and
                             tracks

	/control/              : GET: return play status/volume status
                            POST: stop/pause/start/jump/change vol

